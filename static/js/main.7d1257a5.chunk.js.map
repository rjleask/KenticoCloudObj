{"version":3,"sources":["Components/pizza.js","Components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["ContentItem","NavItem","props","pageURI","window","location","pathname","search","liClassName","path","disabled","react_default","a","createElement","className","href","name","NavDropdown","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isToggleOn","e","preventDefault","setState","prevState","_this2","classDropdownMenu","id","role","data-toggle","aria-haspopup","aria-expanded","onClick","showDropdown","aria-labelledby","children","React","Component","Navigation","type","data-target","aria-controls","aria-label","Navigation_NavItem","Navigation_NavDropdown","KenticoCloud","require","App","DeliveryClient","projectId","items","getObservable","subscribe","response","console","log","Components_Navigation","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d1257a5.chunk.js","sourcesContent":["\nimport { ContentItem, Fields } from 'kentico-cloud-delivery';\n\n/**\n* This class was generated by 'kentico-cloud-model-generator-utility' at Wed Apr 24 2019 12:52:58 GMT-0400 (Eastern Daylight Time).\n*/\nexport class Pizza extends ContentItem {\n        constructor() {\n        super({\n            propertyResolver: ((fieldName) => {\n                if (fieldName === 'product_status') {\n                    return 'productStatus';\n                }\n                return fieldName;\n            })\n        });\n    }\n}\nexport default Pizza;\n","import React from 'react';\r\nconst NavItem = props => {\r\n  const pageURI = window.location.pathname+window.location.search;\r\n  const liClassName = (props.path === pageURI) ? \"nav-item active\" : \"nav-item\";\r\n  const aClassName = props.disabled ? \"nav-link disabled\" : \"nav-link\"\r\n    return (\r\n        <li className={liClassName}>\r\n            <a href={props.path} className=\"nav-link\">\r\n                {props.name}\r\n                {(props.path === pageURI) ? (<span className=\"sr-only\">(current)</span>) : ''}\r\n            </a>\r\n        </li>\r\n    )\r\n}\r\nclass NavDropdown extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        isToggleOn: false\r\n      };\r\n    }\r\n    showDropdown(e) {\r\n      e.preventDefault();\r\n      this.setState(prevState => ({\r\n        isToggleOn: !prevState.isToggleOn\r\n      }));\r\n    }\r\n    render() {\r\n      const classDropdownMenu = 'dropdown-menu' + (this.state.isToggleOn ? ' show' : '')\r\n      return (\r\n        <li className=\"nav-item dropdown\">\r\n          <a className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\"\r\n            aria-haspopup=\"true\" aria-expanded=\"false\"\r\n            onClick={(e) => {this.showDropdown(e)}}>\r\n            {this.props.name}\r\n          </a>\r\n          <div className={classDropdownMenu} aria-labelledby=\"navbarDropdown\">\r\n            {this.props.children}\r\n          </div>\r\n        </li>\r\n      )\r\n    }\r\n  }\r\nclass Navigation extends React.Component {\r\n    render(){\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <a className=\"navbar-brand\" href=\"/\">Pizza Time</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <NavItem path=\"/\" name=\"Home\" />\r\n                        <NavItem path=\"/page2\" name=\"Page2\" />\r\n                        <NavItem path=\"/page3\" name=\"Disabled\" disabled=\"true\" />\r\n\r\n                        <NavDropdown name=\"Pizzas\">\r\n                            <a className=\"dropdown-item\" href=\"/\">Cheddar Cheese</a>\r\n                            <a className=\"dropdown-item\" href=\"/\">Sausage Green Pepper</a>\r\n                            <a className=\"dropdown-item\" href=\"/\">Something else here</a>\r\n                        </NavDropdown>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\nexport default Navigation;","import React from 'react';\nimport {Pizza} from './Components/pizza.js';\nimport Navigation from \"./Components/Navigation\";\nconst KenticoCloud = require('kentico-cloud-delivery');\n\nfunction App() {\n  const deliveryClient = new KenticoCloud.DeliveryClient({\n    projectId: '459262d7-8f9a-00cd-3f92-f228aa805613',\n});\n\ndeliveryClient.items()\n    .type('pizza')\n    .getObservable()\n    .subscribe(response => console.log(response.items));\n  return (\n    <div>\n      <Navigation />\n    <div className=\"container\">\n         <h1>Lets go!!</h1>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}